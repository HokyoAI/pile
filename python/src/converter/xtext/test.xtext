grammar org.omg.sysml.xtext.SysML with org.omg.kerml.expressions.xtext.KerMLExpressions

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore
import "https://www.omg.org/spec/SysML/20230201" as SysML

/* ROOT NAMESPACE */


terminal SL_NOTE:
	'//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;

TargetExpression returns SysML::Expression :
	BaseExpression
	( ( {SysML::FeatureChainExpression.operand += current} '.' 
	  ownedRelationship += FeatureChainMember
	  )?
	  ( {SysML::OperatorExpression.operand += current} 
	    operator = '[' operand += SequenceExpression ']'
	  | {SysML::OperatorExpression.operand += current} '->' 
	    ownedRelationship += ReferenceTyping 
	    ( ownedRelationship += ExpressionBodyMember 
	    | ownedRelationship += FunctionReferenceMember 
	    | ArgumentList
	    ) 
	  | {SysML::CollectExpression.operand += current} '.'
	    ownedRelationship += ExpressionBodyMember 
	  | {SysML::SelectExpression.operand += current} '.?'
	    ownedRelationship += ExpressionBodyMember 
	  )
	)*
;

Dependency returns SysML::Dependency :
	( ownedRelationship += PrefixMetadataAnnotation )*
	'dependency' ( Identification? 'from' )?
    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )*
    RelationshipBody
;

fragment Identification returns SysML::Element :
	  '<' declaredShortName = Name '>' ( declaredName = Name )?
	| declaredName = Name
;
