start: grammar_declaration (import_statement | rule_statement)*

name: /[a-zA-Z][a-zA-Z0-9_]*/ -> name
qualified_name: name ("." name)*

grammar_declaration: "grammar" qualified_name hidden_section? with_section?
with_section: "with" qualified_name
hidden_section: "hidden" "(" hidden_item_list ")"
hidden_item_list: name ("," name)*


// Define the import statement rule with all its variants
import_statement: simple_import | import_with_alias
simple_import: "import" IMPORT_URL
import_with_alias: "import" IMPORT_URL "as" name
IMPORT_URL: QUOTED_URL | SINGLE_QUOTED_URL
QUOTED_URL: "\"" URL_CONTENT "\""
SINGLE_QUOTED_URL: "'" URL_CONTENT "'"
URL_CONTENT: /[^"']+/


data_type: name "::" qualified_name  // Must match an imported alias

rule_statement: decorators* rule_modifiers* rule_name return_type? ":" rule_body ";"
rule_name: name
// Returns section (example: "returns SysML::Element")
return_type: "returns" data_type

// Rule to match XText rule body with alternatives and sequences
// Top-level structure
rule_body: statements // Use rule_body so we can transform on it
statements: alternative

// Structural constructs
alternative: sequence ("|" sequence)*
sequence: item+
item: basic_element | group | predicate | assignment_item

group: _explicit_group | _single_group
_explicit_group: negation? "(" statements ")" cardinality?
_single_group: negation? basic_element cardinality?
optional: "?"
at_least_one: "+"
zero_or_more: "*"
cardinality: optional | at_least_one | zero_or_more
negation: "!"

predicate: ("->" | "=>") statements

// Assignment structures
type_spec: "{" data_type "}"
assignment_item: property_assignment | list_prop_assignment | bool_prop_assignment | non_parsing_assignment
property_assignment: left_sides "=" right_sides
list_prop_assignment: left_sides "+=" right_sides
bool_prop_assignment: left_sides "?=" right_sides

non_parsing_assignment: non_parsing_type | non_parsing_equals | non_parsing_list
non_parsing_type: "{" data_type "}"
non_parsing_equals: "{" left_sides "=" right_sides "}"
non_parsing_list: "{" left_sides "+=" right_sides "}"

left_sides: (type_spec? name) | data_type
right_sides: XTEXT_CURRENT | name_resolution | group 
XTEXT_CURRENT: "current"
name_resolution: "[" (name | data_type) ("|" (name | data_type))* "]"

// Basic atomic elements
basic_element: rule_call | pure_parsing
rule_call: name

pure_parsing: literal | terminal_rules

literal: (DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING | WS_LITERALS)
// lone backslash is not valid in a string literal
DOUBLE_QUOTED_STRING: /"(\\.|[^"])*"/ //either an escaped character or any character that isn't a double quote
SINGLE_QUOTED_STRING: /'(\\.|[^'])*'/
WS_LITERALS: SPACE_LITERAL | TAB_LITERAL | CR_LITERAL | LF_LITERAL
SPACE_LITERAL: "' '" | "\" \""  // ' ' or " "
TAB_LITERAL: "'\\t'" | "\"\\t\"" // '\t' or "\t"
CR_LITERAL: "'\\r'" | "\"\\r\"" // '\r' or "\r"
LF_LITERAL: "'\\n'" | "\"\\n\"" // '\n' or "\n"


terminal_rules: char_range | wildcard | until
char_range: literal ".." literal
wildcard: literal "." literal
until: literal "->" literal


// rule modifiers
rule_modifiers: terminal_mod | enum_mod | fragment_mod
terminal_mod: "terminal"
enum_mod: "enum"
fragment_mod: "fragment"

// rule decorators
override_dec: "@Override"
final_dec: "@Final"
deprecated_dec: "@Deprecated"
exported_dec: "@Exported"
decorators: override_dec | final_dec | deprecated_dec | exported_dec

// Have to be careful ignoring whitespace, as the grammar might include whitespace characters as literals
_WS: /[ \t\r\n]+/
_COMMENT: /\/\/[^\n]*/ | /\/\*(.|\n)*?\*\//

%ignore _WS
%ignore _COMMENT